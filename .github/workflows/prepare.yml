name: Prepare for sharing terraform state

run-name: Create AWS S3 buckets and DynamoDB table on ${{ inputs.env }} environment

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Running environment'
        required: true
        type: choice
        options:
          - dev
          - prd

jobs:
  prepare:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      DYNAMODB_LOCK_TABLE_NAME: ${{ vars.PROJECT_NAME }}-state-lock-table-${{ inputs.env }}
      S3_BUCKET_NAME: ${{ vars.PROJECT_NAME }}-state-${{ inputs.env }}
      S3_LOGS_BUCKET_NAME: ${{ vars.PROJECT_NAME }}-state-logs-${{ inputs.env }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create an AWS DynamoDB table for lock management
        run: |
          aws dynamodb create-table \
          --table-name ${{ env.DYNAMODB_LOCK_TABLE_NAME }} \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

      - name: Create an AWS S3 bucket for logs
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_LOGS_BUCKET_NAME }} --region ${{ env.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
          printf '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "S3ServerAccessLogsPolicy",
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "logging.s3.amazonaws.com"
                      },
                      "Action": [
                          "s3:PutObject"
                      ],
                      "Resource": "arn:aws:s3:::%s/*",
                      "Condition": {
                          "ArnLike": {
                              "aws:SourceArn": "arn:aws:s3:::%s"
                          },
                          "StringEquals": {
                              "aws:SourceAccount": "%s"
                          }
                      }
                  }
              ]
          }' "${{ env.S3_LOGS_BUCKET_NAME }}" "${{ env.S3_BUCKET_NAME }}" "$(aws sts get-caller-identity --query Account --output text)" > policy.json
          aws s3api put-bucket-policy --bucket ${{ env.S3_LOGS_BUCKET_NAME }} --policy file://policy.json

      - name: Create an AWS S3 bucket for terraform state
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region ${{ env.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
          aws s3api put-bucket-versioning --bucket ${{ env.S3_BUCKET_NAME }} --versioning-configuration Status=Enabled
          printf '{
          "LoggingEnabled": {
            "TargetBucket": "%s",
            "TargetPrefix": "%s/"
            }
          }' "${{ env.S3_LOGS_BUCKET_NAME }}" "${{ env.S3_BUCKET_NAME }}" > logging.json
          aws s3api put-bucket-logging --bucket ${{ env.S3_BUCKET_NAME }} --bucket-logging-status file://logging.json
